{"version":3,"sources":["components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Modal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","shapes","colors","shape","fill","c","document","getElementById","ctx","getContext","centerX","width","centerY","height","beginPath","arc","Math","PI","fillStyle","clearRect","rect","lineWidth","moveTo","lineTo","closePath","classList","remove","add","_this2","react_default","a","createElement","id","className","onClick","handleClose","style","color","map","key","setState","backgroundColor","handleConfirmation","React","Component","App","handleClick","event","Modal_Modal","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab60a7a8.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      shapes: ['circle', 'square', 'triangle', 'rectangle'],\n      colors: ['#b2dfdb', '#ffe0b2', '#f8bbd0', '#dcedc8'],\n      shape: 'circle',\n      fill: '#b2dfdb'\n    };\n  }\n\n  componentDidMount() {\n    const c = document.getElementById('myCanvas');\n    const ctx = c.getContext('2d');\n    const centerX = c.width / 2;\n    const centerY = c.height / 2;\n    const radius = 70;\n    let fill = this.state.fill;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n    ctx.fillStyle = fill;\n    ctx.fill();\n  }\n\n  componentDidUpdate() {\n    const c = document.getElementById('myCanvas');\n    const ctx = c.getContext('2d');\n    const centerX = c.width / 2;\n    const centerY = c.height / 2;\n    const radius = 70;\n    let shape = this.state.shape;\n    let fill = this.state.fill;\n\n    if (shape === 'circle') {\n      ctx.clearRect(0, 0, c.width, c.height);\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n      ctx.fillStyle = fill;\n      ctx.fill();\n    } else if (shape === 'square') {\n      ctx.clearRect(0, 0, c.width, c.height);\n\n      ctx.beginPath();\n      ctx.rect(centerX - 200 / 2, centerY - 200 / 2, 200, 200);\n      ctx.fillStyle = fill;\n      ctx.fill();\n    } else if (shape === 'rectangle') {\n      ctx.clearRect(0, 0, c.width, c.height);\n\n      ctx.beginPath();\n      ctx.rect(centerX - 200 / 2, centerY - 100 / 2, 200, 100);\n      ctx.fillStyle = fill;\n      ctx.fill();\n    } else if (shape === 'triangle') {\n      ctx.clearRect(0, 0, c.width, c.height);\n\n      ctx.fillStyle = fill;\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n\n      ctx.moveTo(100, 100);\n      ctx.lineTo(300, 100);\n      ctx.lineTo(100, 300);\n      ctx.lineTo(100, 100);\n\n      ctx.fill();\n      ctx.closePath();\n    } else if (shape === '' && fill === '') {\n      ctx.clearRect(0, 0, c.width, c.height);\n    }\n  }\n\n  // handleClose = event =>\n  //   document.getElementById('myModal').classList.remove('show');\n\n  handleClose() {\n    document.getElementById('myModal').classList.remove('show');\n    document.getElementById('confirmWraper').classList.add('hide');\n    document.getElementById('modalContent').classList.remove('hide');\n  }\n  handleConfirmation() {\n    document.getElementById('modalContent').classList.add('hide');\n    document.getElementById('confirmWraper').classList.remove('hide');\n  }\n\n  render() {\n    return (\n      <div id=\"myModal\" className=\"modal\">\n        <div className=\"modal-content-wrapper\">\n          <div id=\"confirmWraper\" className=\"hide\">\n            <button\n              className=\"button confirm-button\"\n              onClick={this.handleClose}\n            >\n              Confirm\n            </button>\n          </div>\n          <div id=\"modalContent\" className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h2 style={{ color: this.state.fill }}>\n                Modal Header: <span>{this.state.shape}</span>\n              </h2>\n              <button className=\"closeButton\" onClick={this.handleClose}>\n                &times;\n              </button>\n            </div>\n            <div className=\"shape-list\">\n              {this.state.shapes.map((shape, id) => (\n                <button\n                  className=\"list-item\"\n                  key={id}\n                  onClick={() => this.setState({ shape: shape })}\n                >\n                  {shape}\n                </button>\n              ))}\n            </div>\n\n            <div>\n              <canvas\n                id=\"myCanvas\"\n                className=\"shape-container\"\n                width=\"300px\"\n                height=\"300px\"\n              />\n            </div>\n\n            <div className=\"color-list\">\n              {this.state.colors.map((color, id) => (\n                <button\n                  key={id}\n                  className=\"dot\"\n                  onClick={() => this.setState({ fill: color })}\n                  style={{ backgroundColor: color }}\n                />\n              ))}\n            </div>\n            <footer className=\"footer\">\n              <button\n                className=\"button button__modified\"\n                onClick={this.handleClose}\n              >\n                Skip\n              </button>\n              <button className=\"button\" onClick={this.handleConfirmation}>\n                Next\n              </button>\n            </footer>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Modal from './components/Modal';\n\nclass App extends Component {\n  handleClick = event =>\n    document.getElementById('myModal').classList.add('show');\n\n  render() {\n    return (\n      <main className=\"main\">\n        <button className=\"button\" onClick={this.handleClick}>\n          Open Modal\n        </button>\n        <Modal />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}